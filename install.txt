chronychronjob(){
#!/bin/bash
if systemctl status chronyd &> /dev/null
then
echo "chrony is available in this vm..."
else
echo "chrony is not available..."
return
fi
output=$(crontab -l)
if echo "$output" | grep -q "\*/5 \* \* \* \* /usr/local/bin/check_chrony.sh"; then
echo "cronjob for chrony service is already running..."
return
else
echo "Running cronjob for chrony service"
fi
#!/bin/bash
cat <<CHECKCHRONY >/usr/local/bin/check_chrony.sh
#!/bin/bash
# Check if chrony service is running
if systemctl is-active --quiet chrony; then
echo "Chrony service is running."
else
# Restart chrony service
echo "Chrony service is not running. Restarting..."
systemctl restart chrony
fi
CHECKCHRONY
chmod +x /usr/local/bin/check_chrony.sh
(crontab -l ; echo "*/5 * * * * /usr/local/bin/check_chrony.sh") | crontab -
echo “cron job for chrony service running successfully…”
}
#checking tmp disk size
checkTmpDiskSize(){
  MIN_DISK_SIZE_TMP=30
  disk_size=`df -hT /tmp | tail -1 | awk '{print $5}' | head -c-2`
  disk_size=${disk_size%.*}
  if [ "$disk_size" -lt "$MIN_DISK_SIZE_TMP" ];then
  		printf "WARNING: low disk size detected, tmp directory required minimum: %s GB\n" "${MIN_DISK_SIZE_TMP}"
  		return 1
  else
   	printf "INFO: tmp disk size is fine. Available disk size: %s GB and Minimum required: %s GB\n" "${disk_size}" "${MIN_DISK_SIZE_TMP}"
  fi
}
#checking mnt disk size
checkMntDiskSize(){
  MIN_DISK_SIZE_MNT=100
  disk_size=`df -hT /mnt | tail -1 | awk '{print $5}' | head -c-2`
  disk_size=${disk_size%.*}
  if [ "$disk_size" -lt "$MIN_DISK_SIZE_MNT" ];then
  		printf "WARNING: low disk size detected, mnt directory required minimum: %s GB\n" "${MIN_DISK_SIZE_MNT}"
  		return 1
  else
   	printf "INFO: mnt disk size is fine. Available disk size: %s GB and Minimum required: %s GB\n" "${disk_size}" "${MIN_DISK_SIZE_MNT}"
  fi
}
checkPidMax(){
  pid=$(cat /proc/sys/kernel/pid_max | head -n 1)
  pid_int=$((pid))
  uname -i | grep x86_64
  if [ $? -eq 0 ]; then
     if [ $pid_int -lt 4194304 ]; then
       sysctl kernel.pid_max=4194304
     fi
     cat /etc/sysctl.conf | grep "kernel.pid_max=4194304"
     if [ $? -ne 0 ]; then
       sudo echo 'kernel.pid_max=4194304' >> /etc/sysctl.conf
     fi
  else
     if [ $pid_int -lt 32768 ]; then
       sysctl kernel.pid_max=32768
     fi
     cat /etc/sysctl.conf | grep "kernel.pid_max=32768"
     if [ $? -ne 0 ]; then
       sudo echo 'kernel.pid_max=32768' >> /etc/sysctl.conf
     fi
  fi
}
checkFileDescriptor(){
  reboot=yes
  need_reboot=false
  slimit=$(ulimit -n | head -n 1)
  slimit_int=$((slimit))
  if [ $slimit_int -lt 100000 ]; then
   sudo echo '*    soft nofile 100000' >> /etc/security/limits.conf
   sudo echo 'root    soft nofile 100000' >> /etc/security/limits.conf
   need_reboot=true
  fi
  hlimit=$(ulimit -Hn | head -n 1)
  hlimit_int=$((hlimit))
  if [ $hlimit_int -lt 100000 ]; then
   sudo echo '*    hard nofile 100000' >> /etc/security/limits.conf
   sudo echo 'root    hard nofile 100000' >> /etc/security/limits.conf
   need_reboot=true
  fi
  if [ "$need_reboot" = true ]; then
    printf "INFO: File Descriptor Limit has been Optimized, Please reboot your machine for it to take place\n"
    skip_reboot_exit="${SKIP_REBOOT_CHECK:-false}"
    if [[ "$reboot" = "yes" && "$skip_reboot_exit" = true ]]; then
      exit 1
    fi
  fi
}
SYSTEM_STATS_FILE="system-monitoring.log"
#setting transparent huge pages (THP) support enabled in your kernel
disableThp(){
  sudo echo never > /sys/kernel/mm/transparent_hugepage/enabled
  #retain the setting after a reboot
  file="/etc/rc.local"
  thp=`sudo cat  $file 2>/dev/null | grep -i "transparent_hugepage/enabled"`
  if [[ ! -f $file ]] || [[ "$thp" == "" ]]; then
    sudo echo 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' >> $file
  fi
}
#setting inotify to 1048576 if not set properly
setInotifyWatch(){
  sudo sysctl -w fs.inotify.max_user_watches=1048576 >/dev/null
  file="/etc/sysctl.d/inotify.conf"
  inotify=`sudo cat  $file 2>/dev/null | grep -i "fs.inotify.max_user_watches"`
  if [[ ! -f $file ]] || [[ "$inotify" == "" ]]; then
    sudo echo 'fs.inotify.max_user_watches=1048576' >> $file
   else
    sudo sed -i '/fs.inotify.max_user_watches/c\fs.inotify.max_user_watches=1048576' $file
   fi
}
#setting bridge-nf-call-iptables to 1 if not set properly
setBridgeNfCallIptables(){
  sudo sysctl -w net.bridge.bridge-nf-call-iptables=1 >/dev/null
  file="/etc/sysctl.d/10-bridge-nf-call-iptables.conf"
  bridgeNf=`sudo cat  $file 2>/dev/null | grep -i "net.bridge.bridge-nf-call-iptables"`
  if [[ ! -f $file ]] || [[ "$bridgeNf" == "" ]]; then
    sudo echo 'net.bridge.bridge-nf-call-iptables=1' >> $file
   else
    sudo sed -i '/net.bridge.bridge-nf-call-iptables/c\net.bridge.bridge-nf-call-iptables=1' $file
   fi
}
#setting ip4_forward to 1 if not set properly
setIpForward(){
  sudo sysctl -w net.ipv4.ip_forward=1 >/dev/null
  file="/etc/sysctl.conf"
  ipForward=`sudo cat  $file 2>/dev/null | grep -i "net.ipv4.ip_forward"`
  if [[ ! -f $file ]] || [[ "$ipForward" == "" ]]; then
    sudo echo 'net.ipv4.ip_forward=1' >> $file
   else
    sudo sed -i '/net.ipv4.ip_forward/c\net.ipv4.ip_forward=1' $file
   fi
}
#setting VmMaxMapCount to 262144 if not set properly
setVmMaxMapCount(){
  sudo sysctl -w vm.max_map_count=262144 >/dev/null
  file="/etc/sysctl.conf"
  vmMaxMapCount=`sudo cat  $file 2>/dev/null | grep -i "vm.max_map_count"`
  if [[ ! -f $file ]] || [[ "$vmMaxMapCount" == "" ]]; then
    sudo echo 'vm.max_map_count=262144' >> $file
   else
    sudo sed -i '/vm.max_map_count/c\vm.max_map_count=262144' $file
   fi
}
#setting filesystem may_detach_mounts to 1 if not set properly
setfsMayDetachMounts(){
  sudo sysctl -w fs.may_detach_mounts=1 >/dev/null
  file="/etc/sysctl.d/10-may_detach_mounts.conf"
  mayDetachMounts=`sudo cat  $file 2>/dev/null | grep -i "fs.may_detach_mounts"`
  if [[ ! -f $file ]] || [[ "$mayDetachMounts" == "" ]]; then
    sudo echo 'fs.may_detach_mounts=1' >> $file
  else
    sudo sed -i '/fs.may_detach_mounts/c\fs.may_detach_mounts=1' $file
  fi
}
commandExists(){
  command -v "$@" > /dev/null 2>&1
}
selinux_enabled(){
  if commandExists "selinuxenabled"; then
	 selinuxenabled
	 return
  elif commandExists "sestatus"; then
	 ENABLED=$(sestatus | grep 'SELinux status' | awk '{ print $3 }')
	 echo "$ENABLED" | grep --quiet --ignore-case enabled
	 return
  fi
  return 1
}
#disabling selinux by running setenforce 0 is required to allow containers to access the host filesystem, which is required by pod networks
disableSelinux(){
  if selinux_enabled; then
    sudo setenforce 0
    file="/etc/selinux/config"
    getSelinux=`sudo cat $file 2>/dev/null | grep -i "SELINUX="`
    if [[ ! -f $file ]] || [[ "$getSelinux" == "" ]]; then
      sudo echo 'SELINUX=disabled' >> $file
    else
      sudo sed -i s/^SELINUX=.*$/SELINUX=disabled/ $file
    fi
  fi
}
#adding kubernetes pod and service subnet to firewalld
configureFirewalld(){
  majorVersion=`sudo cat /etc/os-release | grep -i "VERSION_ID" | awk -F'"' '{print $2}' | awk -F'.' '{print $1}'`
  if ! systemctl -q is-active firewalld ; then
    return
  else
    physicalInterface=`sudo ls -l /sys/class/net | grep -v virtual | awk -F' ' '{print $9}' | awk 'NF'`
    sudo firewall-cmd --zone=trusted --add-source=10.244.0.0/16 --permanent #pod subnet
    sudo firewall-cmd --zone=trusted --add-source=10.100.0.0/16 --permanent #service subnet
	 sudo firewall-cmd --zone=trusted --add-interface=$physicalInterface --permanent  #enable eth0 in trusted zone so nodes can communicate
	 sudo firewall-cmd --zone=trusted --add-masquerade --permanent           #masquerading so packets can be routed back
	 sudo firewall-cmd --reload
	 sudo systemctl restart firewalld
  fi
}
#verifying and loading all kernel modules required by gravitational
verifyandLoadKernelModules(){
  modules=(br_netfilter overlay ebtables ebtable_filter ip_tables iptable_filter iptable_nat)
  for module in ${modules[*]}
  do
    module_check=`sudo lsmod | grep $module`
    if [ -z "$module_check" ]; then
       sudo modprobe $module
     fi
  done
  file="/etc/modules-load.d/netfilter.conf"
  br_netfilter=`sudo cat $file 2>/dev/null | grep -i br_netfilter`
  if [[ ! -f $file ]] || [[ "$br_netfilter" == "" ]]; then
     sudo echo 'br_netfilter' >> $file
   fi
   file="/etc/modules-load.d/overlay.conf"
  overlay=`sudo cat $file 2>/dev/null | grep -i overlay`
  if [[ ! -f $file ]] || [[ "$overlay" == "" ]]; then
     sudo echo 'overlay' >> $file
   fi
   file="/etc/modules-load.d/network.conf"
  ebtable_filter=`sudo cat $file 2>/dev/null | grep -i ebtable_filter`
  if [[ ! -f $file ]] || [[ "$ebtable_filter" == "" ]]; then
     sudo echo 'ebtable_filter' >> $file
   fi
   file="/etc/modules-load.d/iptable.conf"
  ip_table=`sudo cat $file 2>/dev/null | grep -i ip_table`
  if [[ ! -f $file ]] || [[ "$ip_table" == "" ]]; then
     sudo echo 'ip_table' >> $file
  fi
  iptable_filter=`sudo cat $file 2>/dev/null | grep -i iptable_filter`
  if [[ ! -f $file ]] || [[ "$iptable_filter" == "" ]]; then
    sudo echo 'iptable_filter' >> $file
  fi
  iptable_nat=`sudo cat $file 2>/dev/null | grep -i iptable_nat`
  if [[ ! -f $file ]] || [[ "$iptable_nat" == "" ]]; then
    sudo echo 'iptable_nat' >> $file
  fi
}
#CPU and memory monitoring function
monitorCPUandMem(){
  printf "LISTING COMMANDS BASED ON HIGHEST CPU USAGE\n\n"
  ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head -5
  printf "\n\n"
  printf "LISTING COMMANDS BASED ON HIGHEST MEMORY USAGE\n\n"
  ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head -5
  printf "\n\n"
} >> $SYSTEM_STATS_FILE
#monitoring system disk IO during the install/upgrade process
#https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats
monitorIO(){
  printf "MONITORING DISK I/O OF SYSTEM\n\n"
  printf "*******|*********READS**********|*********WRITES***********|*********************I/O*******************|****\n"
  printf "Dev    | Success    Spent(ms)   | Success       Spent(ms)  | Progress  Spent(ms) Weighted_Spent_I/O(ms)|Used\n"
  statistics=`cat /proc/diskstats`
  disk=`lsblk | grep -i disk | cut -d" " -f1`
  SAVEIFS=$IFS
  IFS=$'\n'
  statistics=($statistics)
  disk=($disk)
  IFS=$SAVEIFS
  for (( i=0; i<${#statistics[@]}; i++ )); do
    read -ra DISKSTAT <<< ${statistics[$i]}
    if [[ " ${disk[@]} " =~ " ${DISKSTAT[2]} " ]]; then
      used=`df -h | grep -i ${DISKSTAT[2]} | awk '{print $5}'`
      printf "%-8s %-11s%-14s%-14s%-13s%-10s%-10s%-23s%-4s" "${DISKSTAT[2]}" "${DISKSTAT[3]}" "${DISKSTAT[6]}"  "${DISKSTAT[7]}" "${DISKSTAT[10]}" "${DISKSTAT[11]}" "${DISKSTAT[12]}" "${DISKSTAT[13]}" "${used}"
      printf "\n"
    fi
  done
  printf "\n\n"
} >> $SYSTEM_STATS_FILE
#System monitoring function running every 3 seconds in background to collect system stats
monitorSystem() {
  while true
  do
    monitorCPUandMem
    monitorIO
    sleep 3
  done
}
#Checking OS version to not flush the iptables, Redhat 8 and later version
osTest() {
  os=`cat /etc/os-release | grep -w "ID" | cut -d "=" -f 2 | sed -e 's/^"//' -e 's/"$//'`
  version=`cat /etc/os-release | grep -w "VERSION_ID" | cut -d "=" -f 2 |sed -e 's/^"//' -e 's/"$//'`
  if [ $os == "rhel" ];then
    if [ $version == "8.5" ] || [ $version == "8.6" ] || [ $version == "8.7" ] || [ $version == "8.8" ];then
      return 1
    fi
  fi
  return 0
}
#main driver function
main() {
  checkPidMax
  checkFileDescriptor
  installPath=/mnt
  sudo rm -rf $installPath/installation/*
  sudo rm -rf $installPath/installation/.gravity
  sudo systemctl stop docker
  sudo mkdir -p $installPath/installation
  [[ $(type -t configureufw) == function ]] && configureufw
  echo "setting cronjob for chrony service"
  chronychronjob
  osTest
  result=$?
  if [ "$result" -eq 0 ];then
    sudo iptables --flush
    sudo iptables-save
  fi
  echo "setting cronjob for chrony service"
  chronychronjob
  cd $installPath/installation
  startProcessTime=$(date +%s)
  printf "\t\tSTARTING SYSTEM MONITORING\n\n" > $SYSTEM_STATS_FILE
  monitorSystem &
  MonitorPID=$!
  skip_validations="${SKIP_VALIDATION_CHECK:-false}"
  if [ "$skip_validations" = true ]; then
    checkTmpDiskSize
    checkMntDiskSize
  fi
  disableThp
  setInotifyWatch
  verifyandLoadKernelModules
  setBridgeNfCallIptables
  setIpForward
  setVmMaxMapCount
  setfsMayDetachMounts
  disableSelinux
  configureFirewalld
  curl "https://privaci-sydney-registry.s3.ap-southeast-2.amazonaws.com/artifacts/privaci-appliance-latest.tar?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIA2OQ3WX4ZCAVHZWM5%2F20231227%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz-Date=20231227T095153Z&X-Amz-Expires=86400&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEBoaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAI61D8X2mUV4qwJC%2BVi90lLTHIHGF45slE9mXwN4oY6qAiAr2nlg6eX5m8YEW%2FaIE0GZ%2Braq7%2FqvtibX66UgJE4yByq0BQij%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDcxODM5MTM5NDA5OCIMvVBkfcbPydcRUu%2BsKogFu561%2FztyP0ROYPCt%2FHQbfuMqwXcdxk6fVVkeCW9f0yEfujCrON5Pr%2BckijHPzpK6liffwiECQMGN5WTHCKQ%2FYh98FnkbB9EJVnKRJenIeX1n5mI4i%2B7W23a8%2ByJlf63CxwO18yyVDn38whMZh9zkQ57qxKouo702d5jwfe3fFtfLs0xaEeuDhGIpoe4bBiqkmNGMfiNOvqaGXMgjMQyruWcs1asZdb%2FaD5W4JkzJoyvv65CFI1hJQl4O7mrTtSfTHS0o7LUDrmdrMBF4DxAR2HRfLD%2FzrVgo1QOJ4EVeH0GQ1WwTj%2BH2ZF2Cb6Ik2yZKcgrHMYtCIiZFpOQF2cCKeuKc6BGfkpDq4Aq19TuVV2qGNlw8rL9r1biQMemkq9iJC3fDVt9wH53E2fD7%2BwlqzpuRuBqUs%2Fh%2BG7kG2MXXQD%2FBQlD44Xv9CuK%2ByGkA09%2BlKMx2xeYpnyLJNAA2ZNlfK5XNUKH62lsVhmYaCTs09Z0g9k3H0ZIl%2FlxbLOWc%2BK0AVSILdXjXKWKO9kxSxbbxR04clXuLnb%2FYir8s986h1eHSYdV52KBYJZDETs2gxW8LoRKzeaczs9KGJ7odeNonQFCN%2F3y2t65oPAyePKv%2BXk%2BwniMNemDvLjpL67IteSRt0ie4rVtc%2B%2FdUobbSmyHuHz0uayIRuudoKnHCXb9qbWrCj%2B8sUfIU2DzbJVbYQ6lZ4hZ5AdSGYRpny1l8bLQpCMe0zoPf5102Z7cZpdl%2BftraGVpGqkxf1QVZzTTpD3IHHsjFGUKHL%2BwjPLFi6GxU%2Bh%2BiDs2vRMJefRdrU6LYJegiZYFIpezSYKCAdd%2FEop%2BlOFmB93unopV%2B0ue90QyNdWvPeyaMKb4eMJzlr6wGOpsBe9UeF9Kbx3jgcUePczGmLSS0ZBWlhIslQXAAW%2Bvaz2GP1PfxiN%2BIx%2BCkN8a9hPqKRNhYHfXUh3BvBuXK6b%2FIcuNkv6HJZGPROci5J3nPh%2Fg%2Fm30sXHpZgzm8SuqPDmUad8Fn6invVt5GkfiXrvytcsJjDRqjm29%2FuisuMCtpyRyjfFxtR0KsNKR5t83CazcU7s8awcxL6swFPns%3D&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=aa80c362a342c99597fddadf91b979101a237d936e644341e34e94b7c19c3b6b" --output privaci-appliance-latest.tar
  tar -xvf privaci-appliance-latest.tar
  sudo rm -rf $installPath/hostpath/*
  sudo ./gravity install --advertise-addr=172.61.14.252 --token=wQMYOsrNBi --cloud-provider=generic --state-dir $installPath/gravity 
  sudo gravity exec sed -i -e 's/,AlwaysPullImages//g' /lib/systemd/system/kube-apiserver.service
  sudo gravity exec systemctl daemon-reload
  sudo gravity exec systemctl restart kube-apiserver
  sleep 90
  echo "Waiting for Redis DB"
  kubectl wait --for=condition=Ready --timeout=150s pod/priv-appliance-redis-master-0
  kubectl exec -it $(kubectl get pods -l app=config-controller -ojsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}') securitictl register -- -l eyJhcGlfa2V5IjoiWnVpSFhucEJEN3JTM25oNCIsImFwaV9zZWNyZXQiOiJDNTU4Q0dwcjJwZmRKYjFrY0FjaU1jU2RpZlcxV0tOQiIsImFwaV9zZXJ2ZXIiOiJodHRwczovL2FwcDQuc2VjdXJpdGkuYWkiLCJjb25uZWN0b3JfdGhyZWFkX2NvdW50IjoiNCIsImRvbWFpbl9uYW1lIjoic3dpcmVzaGlwcGluZy5jb20iLCJpZCI6ImM4ODkxMzQ1LTIwYjktNGQzOC1hYTk5LTUzZGY3MTFhZjc1OSIsInRlbmFudF9kYiI6InRlbmFudDc0NTY3NF9fc3dpcmVzaGlwcGluZ2NvbSIsInRlbmFudF9pZGVudGlmaWVyIjoiNDk5MTg2MWItMmM4ZS00N2E5LWFiYjAtZWVmZDE1NGVlZWM0IiwidGVuYW50X3NhbHQiOiJDU2pNWlRUQ2VEWFM2VGk3bVd2UFBVc3ZmN0tJc2pneCJ9
  shm_sum=$(sha256sum  privaci-appliance-latest.tar | awk '{print $1}')
  md5_sum=$(md5sum  privaci-appliance-latest.tar  | awk '{print $1}')
  if [ "$shm_sum" = "e72b15c9f4d2f63a8d00738df2e013defd0ac4592469961ab6697f7b871444d4" ] && [ "$md5_sum" = "138f116d06ab0034b42ef2fe59e00b62" ]; then
  		echo "Valid sha256sumand md5sum"
  else
   	echo "WARNING: appliancetar may be corrupt"
  fi
  rm -rf packages
  kill -TERM $MonitorPID >/dev/null
  endProcessTime=$(date +%s)
  elapsedTime=$((endProcessTime - startProcessTime))
  kubectl exec -it $(kubectl get pods -n default -l=app=config-controller -o jsonpath='{.items[0].metadata.name}') -n default -- securitictl | grep setos
  if [ $? -eq 0 ]; then
  os=$(cat /etc/os-release | grep NAME | head -n 1 | cut -d = -f 2)
  os=$(echo ${os:1:-1})
  image=$(cat /etc/os-release | grep PRETTY_NAME | head -n 1 | cut -d = -f 2)
  image=$(echo ${image:1:-1})
  kubectl exec -it $(kubectl get pods -n default -l=app=config-controller -o jsonpath='{.items[0].metadata.name}') -n default -- securitictl setos -o "$os" -i "$image"
  fi
if [ -z "$joinCommand" ]; then
echo "#!/bin/bash
function resetSystemSettings() {
printf \"\n******--- Reset System Settings ---******\n\"
if [ -d $installPath/monitor/monitoring.log ]
then
rm -rf $installPath/monitor/monitoring.log
fi
# # 1. check pid
checkPidMax

# # 2. chrony service job
chronychronjob

# # 3. disable thp for redis
disableThp

# # 4. set the Inotify Watch
setInotifyWatch

# # 5. check and load kernel modules
verifyandLoadKernelModules

# # 6. set bridge nf call iptables
setBridgeNfCallIptables

# # 7. setting ip forward
setIpForward

# # 8. setting vm max map count
setVmMaxMapCount

# # 9. setting may detach mount to 1
setfsMayDetachMounts

# # 10. disabling Selinux
disableSelinux

# 11. configuring Firewalld
configureFirewalld

if [ ! -f "$installPath/monitor/monitoring.log" ]; then
echo \"no system changes made\" >> $installPath/monitor/monitoring.log
fi

}

configureFirewalld(){
if ! systemctl -q is-active firewalld ; then
return
else
echo \"firewalld\" >> $installPath/monitor/monitoring.log
physicalInterface=\$(sudo ls -l /sys/class/net | grep -v virtual | awk -F' ' '{print \$9}' | awk 'NF')
sudo firewall-cmd --zone=trusted --add-source=10.244.0.0/16 --permanent #pod subnet
sudo firewall-cmd --zone=trusted --add-source=10.100.0.0/16 --permanent #service subnet
sudo firewall-cmd --zone=trusted --add-interface=\"\$physicalInterface\" --permanent  #enable eth0 in trusted zone so nodes can communicate
sudo firewall-cmd --zone=trusted --add-masquerade --permanent           #masquerading so packets can be routed back
sudo firewall-cmd --reload
sudo systemctl restart firewalld
fi
}

commandExists(){
command -v \"\$@\" > /dev/null 2>&1
}

selinux_enabled(){
if commandExists \"selinuxenabled\"; then
selinuxenabled
return
elif commandExists \"sestatus\"; then
ENABLED=\$(sestatus | grep 'SELinux status' | awk '{ print \$3 }')
echo \"\$ENABLED\" | grep --quiet --ignore-case enabled
return
fi
return 1
}

disableSelinux(){
if selinux_enabled; then
echo \"selinux\" >> $installPath/monitor/monitoring.log
sudo setenforce 0
file=\"/etc/selinux/config\"
getSelinux=\$(sudo cat \$file 2>/dev/null | grep -i \"SELINUX=\")
if [[ ! -f \$file ]] || [[ \"\$getSelinux\" == \"\" ]]; then
sudo echo 'SELINUX=disabled' >> \$file
else
sudo sed -i s/^SELINUX=.*\$/SELINUX=disabled/ \$file
fi
fi
}

setfsMayDetachMounts(){
if [[ -e /proc/sys/fs/may_detach_mounts ]]; then
sudo sysctl fs.may_detach_mounts | grep \"fs.may_detach_mounts = 1\"
if [ \$? -ne 0 ]
then
echo 'fsMayDetachMounts' >> $installPath/monitor/monitoring.log
sudo sysctl -w fs.may_detach_mount=1 >/dev/null
file="/etc/sysctl.d/10-may_detach_mounts.conf"
mayDetachMounts=\$(sudo cat  \$file 2>/dev/null | grep -i \"fs.may_detach_mounts\")
if [[ ! -f \$file ]] || [[ \"\$mayDetachMounts\" == \"\" ]]; then
sudo echo 'fs.may_detach_mounts=1' >> \$file
else
sudo sed -i '/fs.may_detach_mounts/c\fs.may_detach_mounts=1' \$file
fi
fi
fi
}

setVmMaxMapCount(){
sudo sysctl vm.max_map_count | grep \"= 262144\"
if [ \$? -ne 0 ]
then
echo 'vmMaxMapCount' >> $installPath/monitor/monitoring.log
sudo sysctl -w vm.max_map_count=262144 >/dev/null
file="/etc/sysctl.conf"
vmMaxMapCount=\$(sudo cat  \$file 2>/dev/null | grep -i \"vm.max_map_count\")
if [[ ! -f \$file ]] || [[ \"\$vmMaxMapCount\" == \"\" ]]; then
sudo echo 'vm.max_map_count=262144' >> \$file
else
sudo sed -i '/vm.max_map_count/c\vm.max_map_count=262144' \$file
fi
fi
}

setIpForward(){
sudo sysctl net.ipv4.ip_forward | grep \"net.ipv4.ip_forward = 1\"
if [ \$? -ne 0 ]
then
echo 'ipForward' >> $installPath/monitor/monitoring.log
sudo sysctl -w net.ipv4.ip_forward=1 >/dev/null
file="/etc/sysctl.conf"
ipForward=\$(sudo cat  \$file 2>/dev/null | grep -i \"net.ipv4.ip_forward\")
if [[ ! -f \$file ]] || [[ \"\$ipForward\" == \"\" ]]; then
sudo echo 'net.ipv4.ip_forward=1' >> \$file
else
sudo sed -i '/net.ipv4.ip_forward/c\net.ipv4.ip_forward=1' \$file
fi
fi
}

setBridgeNfCallIptables(){
sudo sysctl net.bridge.bridge-nf-call-iptables | grep \"net.bridge.bridge-nf-call-iptables = 1\"
if [ \$? -ne 0 ]
then
echo 'bridgeNf' >> $installPath/monitor/monitoring.log
sudo sysctl -w net.bridge.bridge-nf-call-iptables=1 >/dev/null
file="/etc/sysctl.d/10-bridge-nf-call-iptables.conf"
bridgeNf=\$(sudo cat  \$file 2>/dev/null | grep -i \"net.bridge.bridge-nf-call-iptables\")
if [[ ! -f \$file ]] || [[ \"\$bridgeNf\" == \"\" ]]; then
sudo echo 'net.bridge.bridge-nf-call-iptables=1' >> \$file
else
sudo sed -i '/net.bridge.bridge-nf-call-iptables/c\net.bridge.bridge-nf-call-iptables=1' \$file
fi
fi
}

verifyandLoadKernelModules(){
modules=(br_netfilter overlay ebtables ebtable_filter ip_tables iptable_filter iptable_nat)
for module in \${modules[*]}
do
module_check=\$(sudo lsmod | grep \"\$module\")
if [ -z \"\$module_check\" ]; then
sudo modprobe \"\$module\"
fi
done
file=\"/etc/modules-load.d/netfilter.conf\"
br_netfilter=\$(sudo cat \$file 2>/dev/null | grep -i br_netfilter)
if [[ ! -f \$file ]] || [[ \"\$br_netfilter\" == \"\" ]]; then
sudo echo 'br_netfilter' >> \$file
echo \"brNetfilter\" >> $installPath/monitor/monitoring.log
fi
file=\"/etc/modules-load.d/overlay.conf\"
overlay=\$(sudo cat \$file 2>/dev/null | grep -i overlay)
if [[ ! -f \$file ]] || [[ \"\$overlay\" == \"\" ]]; then
sudo echo 'overlay' >> \$file
echo \"overlay\" >> $installPath/monitor/monitoring.log
fi
file=\"/etc/modules-load.d/network.conf\"
ebtable_filter=\$(sudo cat \$file 2>/dev/null | grep -i ebtable_filter)
if [[ ! -f \$file ]] || [[ \"\$ebtable_filter\" == \"\" ]]; then
sudo echo 'ebtable_filter' >> \$file
echo \"ebtables\" >> $installPath/monitor/monitoring.log
fi
file=\"/etc/modules-load.d/iptable.conf\"
ip_table=\$(sudo cat \$file 2>/dev/null | grep -i ip_table)
if [[ ! -f \$file ]] || [[ \"\$ip_table\" == \"\" ]]; then
sudo echo 'ip_table' >> \$file
echo \"ipTable\" >> $installPath/monitor/monitoring.log
fi
iptable_filter=\$(sudo cat \$file 2>/dev/null | grep -i iptable_filter)
if [[ ! -f \$file ]] || [[ \"\$iptable_filter\" == \"\" ]]; then
sudo echo 'iptable_filter' >> \$file
echo \"ipTableFilter\" >> $installPath/monitor/monitoring.log
fi
iptable_nat=\$(sudo cat \$file 2>/dev/null | grep -i iptable_nat)
if [[ ! -f \$file ]] || [[ \"\$iptable_nat\" == \"\" ]]; then
sudo echo 'iptable_nat' >> \$file
echo \"ipTableNat\" >> $installPath/monitor/monitoring.log
fi
}

setInotifyWatch(){
sudo sysctl fs.inotify.max_user_watches | grep \"fs.inotify.max_user_watches = 1048576\"
if [ \$? -ne 0 ]
then
echo 'iNotifyWatch' >> $installPath/monitor/monitoring.log
sudo sysctl -w fs.inotify.max_user_watches=1048576 >/dev/null
file="/etc/sysctl.d/inotify.conf"
inotify=\$(sudo cat  \$file 2>/dev/null | grep -i \"fs.inotify.max_user_watches\")
if [[ ! -f \$file ]] || [[ \"\$inotify\" == \"\" ]]; then
sudo echo 'fs.inotify.max_user_watches=1048576' >> \$file
else
sudo sed -i '/fs.inotify.max_user_watches/c\fs.inotify.max_user_watches=1048576' \$file
fi
fi
}

disableThp(){
cat /sys/kernel/mm/transparent_hugepage/enabled | grep \"\[never\]\"
if [ \$? -ne 0 ]
then
echo 'disableThp' >> $installPath/monitor/monitoring.log
sudo echo never > /sys/kernel/mm/transparent_hugepage/enabled
fi
}

chronychronjob(){
if systemctl status chronyd &> /dev/null
then
echo \"chrony is available in this vm...\"
else
echo \"chrony is not available...\"
return
fi
output=\$(crontab -l)
if echo \"\$output\" | grep -q \"\*/5 \* \* \* \* /usr/local/bin/check_chrony.sh\"; then
echo \"cronjob for chrony service is already running...\"
return
else
echo \"Running cronjob for chrony service\"
fi
echo \"chronyCronjob\" >> $installPath/monitor/monitoring.log
cat <<CHECKCHRONY >/usr/local/bin/check_chrony.sh
#!/bin/bash
# Check if chrony service is running
if systemctl is-active --quiet chrony; then
echo \"Chrony service is running.\"
else
# Restart chrony service
echo \"Chrony service is not running. Restarting...\"
systemctl restart chrony
fi
CHECKCHRONY
chmod +x /usr/local/bin/check_chrony.sh
(crontab -l ; echo \"*/5 * * * * /usr/local/bin/check_chrony.sh\") | crontab -
echo \"cron job for chrony service running successfully\"
}

checkPidMax(){
pid=\$(cat /proc/sys/kernel/pid_max | head -n 1)
pid_int=\$((pid))
file="/etc/sysctl.conf"
uname -i | grep x86_64
if [ \$? -eq 0 ]; then
if [ \$pid_int -lt 4194304 ]; then
echo \"pidMax\" >> $installPath/monitor/monitoring.log
sysctl kernel.pid_max=4194304
cat \$file | grep \"kernel.pid_max=\"
if [ \$? -ne 0 ]; then
sudo echo 'kernel.pid_max=4194304' >> \$file
else
sudo sed -i '/kernel.pid_max/c\kernel.pid_max=4194304' \$file
fi
fi
else
if [ \$pid_int -lt 32768 ]; then
echo \"pidMax\" >> $installPath/monitor/monitoring.log
sysctl kernel.pid_max=32768
cat \$file | grep \"kernel.pid_max=\"
if [ \$? -ne 0 ]; then
sudo echo 'kernel.pid_max=32768' >> \$file
else
sudo sed -i '/kernel.pid_max/c\kernel.pid_max=32768' \$file
fi
fi
fi
}
resetSystemSettings" > /usr/local/bin/monitoringNode.sh
output=$(crontab -l)
if echo "$output" | grep -q "0 \* \* \* \* /usr/local/bin/monitoringNode.sh"; then
echo "cronjob for monitoringNode service is already running..."
else
chmod +x /usr/local/bin/monitoringNode.sh
(crontab -l ; echo "0 * * * * /usr/local/bin/monitoringNode.sh") | crontab -
echo “cron job for monitoringNode service running successfully…”
fi
fi
  printf "Total time elapsed: %-8s seconds" "${elapsedTime}" >> $SYSTEM_STATS_FILE
}
main
